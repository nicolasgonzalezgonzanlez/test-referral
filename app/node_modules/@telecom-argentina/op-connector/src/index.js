const {
  accounts,
  cards,
  savings
} = require('./accesor/');

const { getParsedAddressService, mock: { responseAddressParsedMock } } = require('./accesor/address');

/**
 * Create the op connector.
 * @param {string} deviceId device id op.
 * @param {string} appId app id op.
 * @param {string} token op token.
 * @returns {object}.
 */
const connector = (baseUri, deviceId, appId, token, user, password) => {

  const params = { baseUri, deviceId, appId, token };

  return {
    register: (data) => accounts.opRegister(params, data),
    me: (clientId) => accounts.opMe(params, clientId),
    update: (clientId) => accounts.opUpdate(params, clientId),
    updateCuit: (clientId) => accounts.opUpdateCuit(params, clientId),
    getToken: () => accounts.opGetToken({ baseUri, deviceId, appId, token, user, password }),
    createCVU: (data) => accounts.opCreateCVU({ baseUri, deviceId, appId }, data),
    getCVU: (clientId) => accounts.opGetCVU({ baseUri, deviceId, appId }, clientId),
    getParseAddress: (jsonGoogle) => getParsedAddressService(params, jsonGoogle),
    updateAddress: (address, clientId)=> accounts.opUpdateAddress(params, address, clientId),
    updateGender: (gender,clientId)=>accounts.opUpdateGender(params,gender,clientId),
    createSavingGoals: (clientId, description) => savings.opCreateSavingAccount(params, clientId, description),
    transactionDetails: (clientId, transactionId)=> savings.opTransactionDetails(params, clientId, transactionId),
    findFinancialAccountForEmail:(clientId, email)=> savings.opFindFinancialAccountForEmail(params, clientId, email),
    renameSavingAccount: (clientId, data)=> savings.opRenameSavingAccount(params, clientId, data),
    financialAccountDetails: (clientId) => savings.opViewFinancialAccountDetails(params, clientId),
    viewSavingAccount: (clientId, flag) => savings.opViewSavingAccount(params, clientId, flag),
    closeSavingAccount: (clientId, accountId) => savings.opCloseSavingAccount(params, clientId, accountId),
    innerTransfer: (clientId, data) => savings.opInnerTransfer(params, clientId, data),
    accountMovements: (clientId, accountId) => savings.opViewAccountMovements(params, clientId, accountId),
    activitiesDetails: (clientId, data) => savings.opViewActivitiesDetails(params, clientId, data),
    findSavingAccount: (clientId, accountId) => savings.opFindSavingAccount(params, clientId, accountId),
    createCardholderAccount: (clientId, data) => cards.opCreateCardholderAccount(params, clientId, data),
    getCardholderAccounts: ( clientId ) => cards.opFindAllCardholderAccounts(params, clientId),
    getCardholderAccountForId : (clientId, accountId) => cards.opFindCardholderAccountForId(params, clientId, accountId), 
    viewCardholderTransactionStatus: (clientId, transactionId) => cards.opViewCardholderTransactionStatus(params, clientId, transactionId),
    getIssuers: (clientId) => cards.opGetIssuers(params, clientId),
    getAffinity: (clientId, issuerId) => cards.opGetAffinityGroup(params, clientId, issuerId),
    getIssuersAndAffinities: (clientId) => cards.opGetIssuersAndAffinitys(params, clientId),
    getCardPrivateData: (clientId, cardId) => cards.opGetCardPrivateData(params, clientId, cardId),
    activateVirtualCard: (clientId, cardId) => cards.opActiveCard(params, clientId, cardId),
    deactivateVirtualCard: (clientId, cardId) => cards.opDeactivateorPauseCard(params, clientId, cardId),
    reportTheftVirtualCard: (clientId, cardId) => cards.opReportCardTheft(params, clientId, cardId),
    temporalLockCard:(clientId,cardId)=>cards.opLockTemporalCard(params, clientId, cardId),
    deactivateCardHolder: (clientId, accountId) => cards.opDeactivateCardHolderAccount(params, clientId, accountId),
    disableCardHolder: (clientId, accountId) => cards.opDisableCardHolderAccount(params, clientId, accountId),
    activateCardHolder: (clientId, accountId) => cards.opActivateCardHolderAccount(params, clientId, accountId),
    updateCorrespondenceAddress: (clientId, accountId, data) => cards.opUpdateCorrespondenceAddress(params, clientId, accountId, data),
    updateAffinityGroup: (clientId, accountId, data) => cards.opUpdateAffinityGroup(params, clientId, accountId, data),
    generateNewCard: (clientId, accountId, data) => cards.opGenerateNewCard(params, clientId, accountId, data),
    regenerateCard: (clientId, cardId, data) => cards.opRegenerateCard(params, clientId, cardId, data),
    enablePhysicalCard: (clientId, cardId) => cards.opEnablePhysicalCard(params, clientId, cardId),
    getPin:(clientId, cardId) =>cards.opGetPin(params,clientId,cardId),
    putPin:(clientId,cardId,data) =>cards.opPutPin(params,clientId,cardId,data),
    mocks: {
      getParseAddressMock: (jsonGoogle) => responseAddressParsedMock(jsonGoogle)
    }
  };
  
};

module.exports = {
  connector,
};