const {
    isHttpError, 
    parseOptions,
    axiosInstance
} = require('../../request');

//Get the axios instance.
const axios = axiosInstance();

/**
 * Create cardholder account
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { object } body body parameters [cardType, affinityId, issuerId, clienTransactionId]
 * @return { promise } 
 */
const opCreateCardholderAccount = async (params, clientId, body) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/prepaid`;
    const options = parseOptions(rest, clientId);

    const response = await axios.post(url, body, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * Find the card holder account for a clientId
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } accountId
 * @return { promise } 
 */
const opFindCardholderAccountForId = async ( params, clientId, accountId ) => {
    
    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/${accountId}`;
    const options = parseOptions(rest, clientId);

    const response = await axios.get(url, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * Get all the card holder accounts from a client.
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @return { promise } 
 */
const opFindAllCardholderAccounts = async ( params, clientId ) => {
    
    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccounts`;
    const options = parseOptions(rest, clientId);

    const response = await axios.get(url, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * Find card holder transactions
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } transactionId extarnal transaction id
 * @return { promise } 
 */
const opViewCardholderTransactionStatus = async ( params, clientId, transactionId ) => {
    
    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccounts?clientTransactionId=${transactionId}`;
    const options = parseOptions(rest, clientId);

    const response = await axios.get(url, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * Get the issuer object from a client.
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @return { promise } 
 */
const opGetIssuers = async ( params, clientId ) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/issuers`;    
    const options = parseOptions(rest, clientId);
    
    const response = await axios.get(url, options);
    
    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };
    
    return response.data;
}

/**
 * Get affinity group from a cliend and custom issuer.
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } issuerId issuerId
 * @return { promise } 
 */
const opGetAffinityGroup = async ( params, clientId, issuerId ) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/issuer/${issuerId}/affinities`;    
    const options = parseOptions(rest, clientId);    
    const response = await axios.get(url, options);
    
    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };
    
    return response.data;
}

/**
 * Get affinity and issuer in one call.
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } issuerId issuerId
 * @return { promise } 
 */
const opGetIssuersAndAffinitys = async ( params, clientId ) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/issuers`;
    const options = parseOptions(rest, clientId);
    
    const issuers = await axios.get(url, options);
    
    //Exception for non 200 code.
    if (isHttpError(issuers.status))
        throw { statusCode: issuers.status, data: issuers.data };
    
    const urlAffinity = `${baseUri}/cardHolderAccount/issuer/${issuers.data[0].id}/affinities`;
    const affinities = await axios.get(urlAffinity, options);

    if (isHttpError(affinities.status))
        throw { statusCode: affinities.status, data: affinities.data };
    
    return {
        issuers: issuers.data[0],
        affinities: affinities.data[0]
    };
}

/**
 * Deactivate a card holder account by Id.
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } accountId
 * @return { promise } 
 */
const opDeactivateCardHolderAccount = async (params, clientId, accountId) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/${accountId}/action/deactivate`;
    const options = parseOptions(rest, clientId);

    const response = await axios.post(url, {}, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * Disable a card holder account by Id.
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } accountId
 * @return { promise } 
 */
const opDisableCardHolderAccount = async (params, clientId, accountId) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/${accountId}/action/disable`;
    const options = parseOptions(rest, clientId);

    const response = await axios.post(url, {}, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * Activate a cardholder account by Id.
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } accountId
 * @return { promise } 
 */
 const opActivateCardHolderAccount = async (params, clientId, accountId) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/${accountId}/action/activate`;
    const options = parseOptions(rest, clientId);

    const response = await axios.post(url, {}, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * Allows updating the user's correspondence address
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } accountId cardholder account ID
 * @param { object } body google maps address object
 * @return { promise } 
 */
 const opUpdateCorrespondenceAddress = async (params, clientId, accountId, body) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/${accountId}/correspondence`;
    const options = parseOptions(rest, clientId);

    const response = await axios.put(url, body, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * Allows you to update the affinity group of the user account
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } accountId cardholder account ID
 * @param { object } body affinity group object
 * @return { promise } 
 */
 const opUpdateAffinityGroup = async (params, clientId, accountId, body) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/${accountId}`;
    const options = parseOptions(rest, clientId);

    const response = await axios.put(url, body, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * Allows the generation of a new card for a user
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } accountId cardholder account ID
 * @param { object } body card object
 * @return { promise } 
 */
 const opGenerateNewCard = async (params, clientId, accountId, body) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/${accountId}/card`;
    const options = parseOptions(rest, clientId);

    const response = await axios.post(url, body, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

module.exports = {
    opCreateCardholderAccount,
    opFindCardholderAccountForId,
    opViewCardholderTransactionStatus,
    opFindAllCardholderAccounts,
    opGetIssuers,
    opGetAffinityGroup,
    opGetIssuersAndAffinitys,
    opDeactivateCardHolderAccount,
    opDisableCardHolderAccount,
    opActivateCardHolderAccount,
    opUpdateCorrespondenceAddress,
    opUpdateAffinityGroup,
    opGenerateNewCard,
};