const {
    isHttpError, 
    parseOptions,
    axiosInstance
} = require('../../request');

//Get the axios instance.
const axios = axiosInstance();

/**
 * Get prepaid card private data
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } cardId credit card private data
 * @return { promise } 
 */
const opGetCardPrivateData = async ( params, clientId, cardId ) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/card/${cardId}`;    
    const options = parseOptions(rest, clientId);    
    const response = await axios.get(url, options);
    
    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };
    
    return response.data;

}

/**
 * Deactivation or pause of virtual card, allows activation again
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } cardId credit card private data
 * @return { promise } 
 */
const opDeactivateorPauseCard = async ( params, clientId, cardId ) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/card/${cardId}/action/deactivate`;    
    const options = parseOptions(rest, clientId);    
    const response = await axios.post(url, {}, options);
    
    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };
    
    return response.data;

}

/**
 * Lock temporal of physical card, allows activation again
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } cardId credit card private data
 * @return { promise } 
 */
 const opLockTemporalCard = async ( params, clientId, cardId ) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/card/${cardId}/action/lock-temporal`;    
    const options = parseOptions(rest, clientId);    
    const response = await axios.post(url, {}, options);
    
    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };
    
    return response.data;

}

/**
 * Virtual card activation
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } cardId credit card private data
 * @return { promise } 
 */
const opActiveCard = async ( params, clientId, cardId ) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/card/${cardId}/action/activate`;    
    const options = parseOptions(rest, clientId);    
    const response = await axios.post(url, {}, options);
    
    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };
    
    return response.data;

}

/**
 * Card theft report, does not allow to activate it again
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } cardId credit card private data
 * @return { promise } 
 */
const opReportCardTheft = async ( params, clientId, cardId ) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/card/${cardId}/action/report-theft`;    
    const options = parseOptions(rest, clientId);    
    const response = await axios.post(url, {}, options);
    
    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };
    
    return response.data;

}

/**
 * Allows you to regenerate a new card from an existing one
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } cardId credit card private data
 * @return { promise } 
 */
 const opRegenerateCard = async ( params, clientId, cardId, body ) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/card/${cardId}/regeneration/regenerate`;    
    const options = parseOptions(rest, clientId);    
    const response = await axios.post(url, body, options);
    
    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };
    
    return response.data;

}

/**
 * Allows the enabling of physical cards.
 * @param { object } params headers parameters 
 * @param { string } clientId client ID
 * @param { string } cardId card id
 * @return { promise } 
 */
 const opEnablePhysicalCard = async ( params, clientId, cardId ) => {

    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/card/${cardId}/commercial-enable`;  
    const options = parseOptions(rest, clientId);    
    const response = await axios.post(url, {}, options);
    
    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };
    
    return response.data;

}

const opGetPin = async(params, clientId, cardId )=>{
    const {baseUri, ...rest} = params;
    const url = `${baseUri}/cardHolderAccount/card/${cardId}/atm/pin`;    
    const options = parseOptions(rest, clientId);    
    const response = await axios.get(url, options);
    
    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };
    
    return response.data;
}
const opPutPin = async(params, clientId, body, cardId )=>{
    const {baseUri, ...rest} = params;

    const url = `${baseUri}/cardHolderAccount/card/${cardId}/atm/pin`;    
    const options = parseOptions(rest, clientId);  
    const response = await axios.put(url, body, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };
    
    return response.data;
}
module.exports = {
    opGetCardPrivateData,
    opActiveCard,
    opDeactivateorPauseCard,
    opLockTemporalCard,
    opReportCardTheft,
    opRegenerateCard,
    opEnablePhysicalCard,
    opGetPin,
    opPutPin
};
