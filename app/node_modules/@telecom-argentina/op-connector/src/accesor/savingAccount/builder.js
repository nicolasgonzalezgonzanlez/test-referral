const {
    isHttpError,
    parseOptions,
    axiosInstance
} = require('../request');

//Get the axios instance.
const axios = axiosInstance();

/**
 * @desc permite crear una saving account
 * @method POST
 * @param {object} params body parameters.
 * @param {string} client_id client id
 * @param {string} description savings account name
 * @return {object}
 */
const opCreateSavingAccount = async (params, clientId, description) => {

    const { baseUri } = params;    
    const url = `${baseUri}/financial-account/saving-account`;

    //Prepare the headers.
    const options = parseOptions(params, clientId);

    //Make the request.
    const response = await axios.post( url, { description }, options );

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * @desc Permite ver las saving account de un usuario activas o inactivas, por defecto devuelve solo las activas
 * @method GET
 * @param {object} params body parameters.
 * @param {string} clientId client id
 * @param {string} flag receives a string "false", defaults to "true"
 * @return {object} Active or inactive accounts
 */
const opViewSavingAccount = async (params, clientId, flag = "true") => {
    
    const { baseUri } = params;
    const url = `${baseUri}/financial-accounts/saving-accounts?enable=${ flag }`;

    //Prepare the headers.
    const options = parseOptions(params, clientId);

    //Make the request.
    const response = await axios.get( url, options );

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * @desc Permite cerrar una saving account, indicando el id del cliente y el id de la cuenta especifica
 * @method POST
 * @param {object} params body parameters.
 * @param {string} clientId client id
 * @param {string} accountId account id
 * @return {object} Closed account detail
 */
const opCloseSavingAccount = async (params, clientId, accountId) => {

    const { baseUri } = params;    
    const url = `${baseUri}/financial-account/saving-account/${accountId}/close`;
    
    //Prepare the headers.
    const options = parseOptions(params, clientId);

    //Make the request.
    const response = await axios.post( url, {} , options );

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * @desc Extrae la data de la cuenta principal a partir del id del cliente
 * @method GET
 * @param {object} params body parameters.
 * @param {string} cliendId client id
 * @return {object} Account details 
 */
const opViewFinancialAccountDetails = async (params, clientId) => {

    const { baseUri } = params;
        const url = `${baseUri}/financial-accounts/available-accounts`;
    
    //Prepare the headers.
    const options = parseOptions(params, clientId)

    //Make the request.
     const response = await axios.get(url, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;
}

/**
 * @desc Actualiza el nombre de la saving account
 * @method PUT
 * @param {object} params body parameters.
 * @param {string} clientId client id
 * @param {object} data account detail ( accountId, description )
 * @return {object}
 */
const opRenameSavingAccount = async (params, clientId, data) => {
    
    const { baseUri } = params;
    const { accountId, description } = data;    
    const url = `${baseUri}/financial-account/saving-account/${ accountId }`;
    
    const options = parseOptions(params, clientId)
    
    //Make the request.
    const response = await axios.put( url, { description }, options );

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * @desc Permite descrubrir la cuenta principal de cualquier usuario, a través de su email
 * @method POST
 * @param {object} params body parameters.
 * @param {string} clientId client id
 * @param {string} email client email
 * @return {object} description and financial account id
 */
const opFindFinancialAccountForEmail = async (params, clientId, email) => {

    const { baseUri } = params;    
    const url = `${baseUri}/transfer/inner/p2p-transfer/beneficiary-discovery`;    
    const options = parseOptions(params, clientId)

    //Make the request.
    const response = await axios.post(url, { email }, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * @desc Permite ver en forma detallada una transacción a través del id de la misma
 * @method GET
 * @param {object} params body parameters.
 * @param {string} clientId client id
 * @param {string} transactionId transfer id
 * @return {object} Transaction details.
 */
const opTransactionDetails = async (params, clientId, transactionId) => {
    
    const { baseUri } = params;    
    const url = `${baseUri}/transaction/${ transactionId }`;    
    const options = parseOptions(params, clientId)
    
    //Make the request.
    const response = await axios.get(url, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * @desc Permite hacer transferencias entre cuentas de un mismo cliente
 * @method POST
 * @param {object} params body parameters.
 * @param {string} clientId client id
 * @param {object} data details for transfer ( origin, destination, amount, comments )
 * @return {object} Detailed transfer information
 */
const opInnerTransfer = async ( params, clientId, data) => {

    const { baseUri } = params;    
    const url = `${baseUri}/transfer/inner`;

    const { origin, destination, amount, comments, clientTransactionId } = data;
    
    const body = {   
        amount,
        clientTransactionId,
        transactionType: "Transfer",
        comments: comments || "Transferencia entre cuentas del usuario",
        transactionData: {
           origin,
           destination 
        }
    }

    const options = parseOptions(params, clientId)

    //Make the request.
    const response = await axios.post( url, body , options );

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * @desc Permite ver todos los movimientos de la cuenta principal
 * @method GET
 * @param {object} params body parameters.
 * @param {string} clientId client id
 * @param {object} data object containing start and end date ( beginDate , endDate )
 * @return {(object|Array)} Details of main account movements
 */
const opViewActivitiesDetails = async (params, clientId, data) => {

    const { baseUri } = params;
    const { beginDate , endDate } = data
    const url = `${baseUri}/activities/transactional/?endDate=${ endDate }&beginDate=${ beginDate }`;

    const options = parseOptions(params, clientId)

    //Make the request.
    const response = await axios.get(url, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * @desc Permite ver los movimientos un cuenta especificada.
 * @method GET
 * @param {object} params body parameters.
 * @param {string} clientId client id 
 * @param {string} accountId Account id
 * @return {object} Details of movements of the selected account
 */
const opViewAccountMovements = async (params, clientId, accountId) => {

    const { baseUri } = params;
    const url = `${baseUri}/financial-account/${accountId}/movements`;
    const options = parseOptions(params, clientId)

    //Make the request.
    const response = await axios.get(url, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    return response.data;

}

/**
 * @desc Realiza una busqueda de las saving account activas y filtra la data de la cuenta seleccionada
 * @method GET
 * @param {object} params body parameters.
 * @param {string} clientId client id
 * @param {string} accountId Savings account id
 * @return {object} Savings goal detail
 */
const opFindSavingAccount = async (params, clientId, accountId) => {

    const { baseUri } = params;
    const url = `${baseUri}/financial-accounts/saving-accounts?enable=true`;
    const options = parseOptions(params, clientId)

    //Make the request.
    const response = await axios.get(url, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
        throw { statusCode: response.status, data: response.data };

    const account = response.data.filter(item => item.id == accountId)

    return account.length > 0 ? account[0]: account;

}

module.exports = {
    opCreateSavingAccount,
    opTransactionDetails,
    opFindFinancialAccountForEmail,
    opRenameSavingAccount,
    opViewFinancialAccountDetails,
    opViewSavingAccount,
    opCloseSavingAccount,
    opInnerTransfer,
    opViewAccountMovements,
    opViewActivitiesDetails,
    opFindSavingAccount
}
