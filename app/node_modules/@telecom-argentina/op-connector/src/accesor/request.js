const logger = require('@telecom-argentina/logger');
const axios = require('axios');

/**
 * Log the request.
 * @param {string} http status code.
 * @returns {boolean}
 */
const logRequest = (request)=>{

  const {
    url,
    method
  } = request;

  logger.debug({
    message:'Request to bhub',
    method,
    url
  });

  return request;

}

/**
 * Log the response.
 * @param {string} http status code.
 * @returns {boolean}
 */
const logResponse = (response)=>{

  const {
    status,
    data
  } = response;

  logger.debug({
    message:'Response from bhub',
    status,
    data:JSON.stringify(data)
  });

  return response;

}

/**
 * Check if the status code is in the error range.
 * @param {string} http status code.
 * @returns {boolean}
 */
const isHttpError = (status) => new RegExp(/^5\d{2}$|^4\d{2}$/).test(status);

/**
 * @desc Generate an object that is used for the headers used in all requests
 * @param {object} params body parameters
 * @param {string} clientId client id
 * @returns {object} Headers used in all requests
 */
const parseOptions = (params, clientId) => {

  const { deviceId, appId } = params;

  return {
      headers: {
          'Content-Type': 'application/json',
          applicationId: appId,
          deviceId: deviceId,
          Authorization: `Basic ${clientId}`,
      },
  };

}

/**
 * @desc Create a unique axios instance
 * @returns {object} Headers used in all requests
 */
const axiosInstance = ()=>{

  //Create an axios instance.  
  const axiosApiInstance = axios.create();

  //Bind interceptors.
  axiosApiInstance.interceptors.request.use(logRequest);
  axiosApiInstance.interceptors.response.use(logResponse);
  
  return axiosApiInstance;

}

module.exports={
  isHttpError,
  axiosInstance,
  parseOptions,
  logRequest,
  logResponse
};