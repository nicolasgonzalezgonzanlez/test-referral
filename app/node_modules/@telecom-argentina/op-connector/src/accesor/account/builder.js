const {   
  isHttpError,
  axiosInstance
} = require('../request');

//Get the axios instance.
const axios = axiosInstance();

const {
  clientParse,
  responseParse,
  parseAddressUpdate,
} = require('./parser.js');

/**
 * Handle the registration.
 * @param {object} params body parameters.
 * @param {object} client teco client schema.
 * @returns {object}.
 */
const opRegister = async (params, client) => {
  try {
    const body = clientParse(client);

    //Extract values.
    const { baseUri, appId, deviceId, token } = params;

    const url = `${baseUri}/account/finalConsumerAccount/register`;

    //Prepare the headers.
    const options = {
      headers: {
        'Content-Type': 'application/json',
        applicationId: appId,
        deviceId: deviceId,
        accessToken: token,
      },
    };

    //Make the request.
    const response = await axios.post(url, body, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
      throw { statusCode: response.status, data: response.data };

    return responseParse(response.data);
  } catch (error) {
    throw error
  }
  
};

/**
 * Handle the registration.
 * @param {object} params body parameters.
 * @param {object} client teco client schema.
 * @returns {object}.
 */
const opCreateCVU = async (params, client) => {
  try {
    //Extract values.
    const { baseUri, appId, deviceId } = params;

    const url = `${baseUri}/bank-services/cvu`;

    //Prepare the headers.
    const options = {
      headers: {
        'Content-Type': 'application/json',
        applicationId: appId,
        deviceId: deviceId,
        Authorization: `Basic ${client.client_id}`,
      },
    };

    //Make the request.
    const response = await axios.post(url, {}, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
      throw { statusCode: response.status, data: response.data };

    return responseParse(response.data);
  } catch (error) {
    throw error
  }
  
};

/**
 * Handle return cvu and if not exist create the alias.
 * @param {object} params body parameters.
 * @param {object} client teco client schema.
 * @returns {object}.
 */
const opGetCVU = async (params, clientId) => {
  try {
    //Extract values.
    const { baseUri, appId, deviceId } = params;

    const url = `${baseUri}/bank-services/cvu`;

    //Prepare the headers.
    const options = {
      headers: {
        'Content-Type': 'application/json',
        applicationId: appId,
        deviceId: deviceId,
        Authorization: `Basic ${clientId}`,
      },
    };

    //Make the request.
    const response = await axios.get(url, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
      throw { statusCode: response.status, data: response.data };

    return responseParse(response.data);
  } catch (error) {
    throw error
  }
};

/**
 * Handle the updating of user account data
 * @param {object} params body parameters.
 * @param {object} client teco client schema.
 * @returns {object}.
 */
const opUpdate = async (params, client) => {
  try {
    const body = clientParse(client);

    //Extract values.
    const { baseUri, appId, deviceId } = params;

    const url = `${baseUri}/me`;

    //Prepare the headers.
    const options = {
      headers: {
        'Content-Type': 'application/json',
        applicationId: appId,
        deviceId: deviceId,
        Authorization: `Basic ${client.client_id}`,
      },
    };

    //Make the request.
    const response = await axios.put(url, body.user, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
      throw { statusCode: response.status, data: response.data };

    return responseParse(response.data);
  } catch (error) {
    throw error
  }
  
};

/**
 * Handle the updating of cuit data
 * @param {object} params body parameters.
 * @param {object} client teco client schema.
 * @returns {object}.
 */
const opUpdateCuit = async (params, client) => {
  try {
    //Make body to request
    const body = {
      tributaryCondition: {
        code: 'RI',
      },
      tributaryIdentificationCode: client.cuil,
      tributaryIdentificationType: {
        code: 'CUIT',
      },
    };

    //Extract values.
    const { baseUri, appId, deviceId } = params;

    const url = `${baseUri}/me/tributary-info/`;

    //Prepare the headers.
    const options = {
      headers: {
        'Content-Type': 'application/json',
        applicationId: appId,
        deviceId: deviceId,
        Authorization: `Basic ${client.client_id}`,
      },
    };

    //Make the request.
    const response = await axios.put(url, body, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
      throw { statusCode: response.status, data: response.data };

    return responseParse(response.data);
  } catch (error) {
    throw error
  }
};

/**
 * Get an account by Id.
 * @desc Returns the user if it exists in op.
 * @param {object} params body parameters.
 * @param {string} clientid client id.
 * @returns {object}.
 */
const opMe = async (params, clientid) => {
  try {
    //Extract values.
    const { baseUri, appId, deviceId } = params;

    const url = `${baseUri}/me`;

    //Prepare the headers.
    const options = {
      headers: {
        'Content-Type': 'application/json',
        applicationId: appId,
        deviceId: deviceId,
        Authorization: `Basic ${clientid}`,
      },
    };

    //Make the request.
    const response = await axios.get(url, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
      throw { statusCode: response.status, data: response.data };

    return response.data;
  } catch (error) {
    throw error
  }
  
};

/**
 * Get token.
 * @desc return the token.
 * @param {string} user
 * @param {string} password
 * @returns {promise<string>}.
 */
const opGetToken = async (params) => {
  try {
    //Extract values.
    const { baseUri, deviceId, appId, token, user, password } = params;

    const url = `${baseUri}/login`;

    //Prepare the headers.
    const options = {
      headers: {
        'Content-Type': 'application/json',
        applicationId: appId,
        deviceId,
      },
    };

    //Make the body.
    const body = JSON.stringify({
      userId: user,
      userPassword: password,
    });

    //Make the request.
    const response = await axios.post(url, body, options);

    //Check if the request is not success, launch a exception.
    if (isHttpError(response.status))
      throw { statusCode: response.status, data: response.data };

    return response.data;
  } catch (error) {
    throw error
  }
  
};

/**
 * Handle the address update.
 * @param {object} params body parameters.
 * @param {object} client teco client schema.
 * @returns {object}.
 */
const opUpdateAddress = async (params, address, clientId) => {
  try {
    //OP format address parser
    const body = parseAddressUpdate(address);

    //Extract values.
    const { baseUri, appId, deviceId, token } = params;

    const url = `${baseUri}/me/address`;
    //Prepare the headers.
    const options = {
      headers: {
        'Content-Type': 'application/json',
        applicationId: appId,
        deviceId: deviceId,
        accessToken: token,
        Authorization: `Basic ${clientId}`,
      },
    };

    //Make the request.
    const response = await axios.put(url, body, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
      throw { statusCode: response.status, data: response.data };

    return responseParse(response.data);
  } catch (error) {
    throw error
  }
  
};

/**
 * Handle the gender update.
 * @param {object} params body parameters.
 * @param {object} client teco client schema.
 * @returns {object}.
 */
const opUpdateGender = async (params, genderParam, clientId) => {
  try {
    //Extract values.
    const { baseUri, appId, deviceId } = params;
    const url = `${baseUri}/me/gender`;

    //Prepare the headers.
    const options = {
      headers: {
        'Content-Type': 'application/json',
        applicationId: appId,
        deviceId: deviceId,
        Authorization: `Basic ${clientId}`,
      },
    };

    //Set gender.
    const body = {
      gender:genderParam
    };

    //Make the request.
    const response = await axios.put(url, body, options);

    //Exception for non 200 code.
    if (isHttpError(response.status))
      throw { statusCode: response.status, data: response.data };

    return responseParse(response.data);
  } catch (error) {
    throw error
  }

  
};

module.exports = {
  opRegister,
  opMe,
  opUpdate,
  opUpdateCuit,
  opUpdateGender,
  opGetToken,
  opCreateCVU,
  opGetCVU,
  opUpdateAddress,
};
