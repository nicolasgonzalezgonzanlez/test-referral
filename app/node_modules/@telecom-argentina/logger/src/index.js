const httpContext = require('express-http-context');

const {
  getVersion,
  getCallerFile
} = require('./utils/callOrigin');

const {
  getFormatedTimestamp
} = require('./utils/date.js');

//Define activation flags of fields in log formatter.
const isJson  = !!process.env.JSON_LOG;
const activeCaller = !!process.env.LOG_CALLER;
const activeVersion = !!process.env.LOG_VERSION;

//Define numeric level number. 
const levelMaps = {
  DISABLE: -1,
  LOG: 0,
  DEBUG: 10,
  INFO: 20,
  WARN: 30,
  ERROR: 40,
  ALL: 50,
  TRACE:0
};

const logLevel = (process.env.LOG_LEVEL === '-1' || process.env.LOG_LEVEL === -1) ? levelMaps.DISABLE : levelMaps.LOG;

function consoleLog() {
  console.log.apply(console, arguments);
}

function consoleError() {
  console.error.apply(console, arguments);
}

let writeLog = consoleLog;
let writeError = consoleError;

// Disable logs
if (logLevel === levelMaps.DISABLE) {
  writeLog = () => {};
  writeError = () => {};
}

/** 
 * Generate a client and traceid object to be injected in log object.
 * @returns {object} {traceId,clientId}
 */
const traceInjector = ()=>{

  const trace = httpContext.get('traceId')?{
    traceId:httpContext.get('traceId')
  }:{};

  const client = httpContext.get('client')?{
    client:httpContext.get('client')
  }:{};
 
  return {
    ...trace,
    ...client
  };

}

/**
 * Return a formatted log.
 * @param {number} level log number level.
 * @param {string} code log description.
 * @param {object} value object or primitive to log.
 * @returns {}
 */
const format = (level,value)=>({
  level,
  ...activeVersion?{version:getVersion()}:null,
  code:levelMaps[level]||0,
  time:getFormatedTimestamp(new Date()),
  ...traceInjector(),
  ...(typeof value ==='object')?value:{message:value},
  ...activeCaller?{logger:getCallerFile()}:null
});

/**
 * This function show in json or directly the object.
 * @param {object} value object or primitive to log.
 * @returns {object}
 */
const out = (value)=>isJson?JSON.stringify(value):value;

/**
 * Return a formatted log.
 * @param {number} level log number level.
 * @param {string} code log description.
 * @param {object} value object or primitive to log.
 * @returns {object}
 */
const all = (value)=>writeLog(out(format('ALL',value)));

/**
 * Return a formatted log.
 * @param {number} level log number level.
 * @param {string} code log description.
 * @param {object} value object or primitive to log.
 * @returns {object}
 */
const debug = (value)=>writeLog(out(format('DEBUG',value)));

/**
 * Return a formatted log.
 * @param {number} level log number level.
 * @param {string} code log description.
 * @param {object} value object or primitive to log.
 * @returns {object}
 */
const info = (value)=>writeLog(out(format('INFO',value)));

/**
 * Return a formatted log.
 * @param {number} level log number level.
 * @param {string} code log description.
 * @param {object} value object or primitive to log.
 * @returns {object}
 */
const warn = (value)=>writeError(out(format(value)));

/**
 * Return a formatted log.
 * @param {number} level log number level.
 * @param {string} code log description.
 * @param {object} value object or primitive to log.
 * @returns {object}
 */
const trace = (value)=>writeLog(out(format('TRACE',value)));

/**
 * @param value error to be logged
 * @returns {object} Return a formatted log.
 */
const error = (value) => writeError(out(format('ERROR',value)));

/**
 * @param {object} value object or primitive to log.
 * @returns {}
 */
const log = (value) => writeLog(out(format('LOG',value)));

module.exports = {
    traceInjector,
    log,
    all,
    trace,
    debug,
    info,  
    warn,
    error
};